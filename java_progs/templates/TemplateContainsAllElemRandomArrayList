package java_progs.progs;

import java.io.IOException;
import java.util."ImportListCollection";

import java_progs.aux.ArrayListAux;
import java_progs.aux.TemplatesAux;

public class TemplateContainsAllElemRandomArrayList {

    static int SIZE = "size";
    static int loopSize = "loopSize";

    private static Boolean containsAllElemRandomArrayList("ListCollection"<"Type"> list, "ListCollection"<"Type"> list2) {
        return list.containsAll(list2);
    }

    private static void computation("ListCollection"<"Type"> list, "ListCollection"<"Type">[] lists, int iter) {
        int i = 0;
        while (!TemplatesAux.stop && i < iter) {
            containsAllElemRandomArrayList(list, lists[i]);
            i++;
        }
    }

    @SuppressWarnings("unchecked")
    public static void main(String[] args) throws IOException, InterruptedException {
        try {
            "ListCollection"<"Type"> list = new "ListCollection"<"Type">"(SIZE*loopSize)";
            "ListCollection"<"Type">[] lists = new "ListCollection"[loopSize];
            for (int i = 0; i < loopSize; i++) {
                "ListCollection"<"Type"> l = new "ListCollection"<"Type">"(SIZE)";
                ArrayListAux.insertRandomNumbers(l, SIZE, ""Type"");
                lists[i] = l;
            }
            ArrayListAux.insertRandomNumbers(list, SIZE, ""Type"");
            long begin = System.nanoTime();
            long end = begin;
            int iter = 0;
            while (end - begin < 1000000000/* 1s */ && iter < loopSize) {
                containsAllElemRandomArrayList(list, lists[iter]);
                end = System.nanoTime();
                iter++;
            }
            TemplatesAux.sendStartSignalToOrchestrator(args[0],iter);
            TemplatesAux.launchTimerThread();
            computation(list, lists, iter);
        } catch (OutOfMemoryError e) {
            TemplatesAux.writeErrorInFile(""filename"", "Out of memory error caught by the program.\n" + e.getMessage());
        } 
        catch (Exception e) {
            TemplatesAux.writeErrorInFile(""filename"","Error caught by the program.\n"+e.getMessage());
        }
        finally {TemplatesAux.sendStopSignalToOrchestrator(args[0]);}

    }

}
