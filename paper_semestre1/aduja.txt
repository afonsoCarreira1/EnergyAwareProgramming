features:
para cada funcao
numero de statements
numero de vars
branches (if/else)
fors
operacoes aritmeticas
invocacoes de metodos (System.out.println()/customFun())
ter em conta os programas que não têm threads
verificar se é necessario obter as features the objetos costum do user de outras classes criadas pelo user
fazer gerador de programas 
correr cada prog 10x e o melhor seria correr de forma random
ter em conta os imports de cada prog
meter os nomes dos novos progs corretos, e os packages tb
mudar as funcoes do aux para terem em conta mais tipos de vars
contains all nao pára em checks que dao false rapidamente
perguntar como vou obter os valores dos inputs


sempre que tem um loop tenho que multiplicar as operaçoes que estao la dentro por algum valor? ou posso so considerar uma vez? tinha que fazer isso para tudo (novas threads, iniciar vars, operaçoes,etc)
somar a cyclomatic complexity dos metodos ou usar apenas os deles?

usar threads c sleep 1s
correr um 1º ciclo para obter o valor do iter
desativar GC
2º ciclo para correr a fun necessaria
dar timeout a programas
se levar timeout ignorar proximos progs c inputs maiores
evosuit cria tests em java

templates -> criar um template para list.equals

confirmar o timer para threads
meter threads e resto a multiplicar pelos loops, em vez de multiplicar, ter features independentes (assignment fora loop, assignment dentro loopx1. assignment dentro loop x2,, etc, x5)
tipo de retorno da fun 
guardar os inputs, guardar oos sizes ou valores que fazem sentido

Apresentaçao relatorio notas

Tirar os don't it's para do not, it is.
porque vscode é melhor para implementar a extensao do que o intelij, a maioria dos developers de java usa que ide
usar llms para criar programas para determinadas libs | usar projetos do git 
usar text~cite{}
pedir tips do prof sobre escrever relatorios
no related work nao usar this study ou this work para referir a um trabalho que eu esteja a citar, pois parece que estou a falar do meu, em vez dos outros.
explicar porque nao utilizo o java parser, em vez do spoon. java parser nao faz type checking como o spoon
cena do latex q me ajuda a quando faço um ref section ou ref img, ele automaticamente mete a cena certa. cref ou la como se chamava

Apresentaçao relatorio notas

adicionar maps e sets 
fazer varios modelos para comparar os resultados
timeout 
separar dados entre maps lists sets arraylist list vector etc
guardar os inputs
usar o spoon para fazer type check dos programas
features têm que recolher glob vars
ignorar progs que têm input mais alto do q outros q deram out of mem


corrigir os erros que os programas dao ao obter dados
criar um modelo para cada metodo (contains, get, set, ...)
ver img no movel
fazer plot y = energia, x = input
enviar os plots, o R² e os csv para os prof
meter comment no pr do powerjoular


o insert vai aumentando o tamanho da lista o que aumenta o consumo de energia
os scores melhoram com mais features normalmente


experimentar java default sort e bubble sort
começar spoon generator
criar gerador de inputs (funcao q crie inputs)

para o addAll por exemplo, na verdade sao os que têm input1 e 2, o input1 e o tamanho da lista em q vou fazer addAll e o input2 é o tamanho da 2ª lista ou o tamanho da lista de listas (ArrayList[] )


correr o get/size/etc...
mudar o gerador de progs com o spoon:
1o criar as listas/vars 
2o correr as listas 1s
3o chamar o GC
4o recriar as listas/vars
5o chamar o computation

usar o spoon para gerar dinamicamente os inputs (ex: recursivamente criar os objetos)
usando o spoon injetar codigo 
uma fun pode mudar as variaveis passadas como arg, por isso e necessario criar varias vars para quecada call da fun, exemplo: fun1(in1,in2,in3)
a fun1 pode alterar os valores do in1,in2,in3, entao vou criar uma lista com triplas de in1,in2,in3 (podem ser sempre os mesmos valores) e vou chamar a fun1 assim: fun1(in1[i],in2[i],in3[i])


usar maven no java project
programa q gera progs (flag para escolher quais os metodos) -> dps chama o q corre os progs -> chama o script py
o random dos inputs que seja uma dist normal

o bubblesort tem aquele spyke por causa destes 2 metodos e talvez mais do CopyOnWriteArrayList
java.util.concurrent.CopyOnWriteArrayList.get(int)
java.util.concurrent.CopyOnWriteArrayList.set(int | java.lang.Object)

para o input1 de 2743, isto porque provavelmente é o limite que esta collec consegue ir entao começa a subir aqui, para os valores seguintes ele da timeout/exception e ja n tem mais nada, o que pode explicar o pq do spike
so vi uma instancia com CopyOnWriteArrayList que tem o input1 maior que 2743.


testar CopyOnWriteArrayList pratica
continuar a organizar (readme, setup, projetos maven)
obter dados do arrayllist get /add/e outro e depois criar um modelo
depois de ter o modelo criar uma classe q chame esses metodos e obter uma previsao, por ultimo
correr o powerjoular e ver se a previsao a for boa
usr placeholder em vez de strings no replace do codegen (@parameter _var_) import spoon.template

mudar nomes dos inputs?

dividir modelos pelos metodos
começar a escrever o ddocumento
tirar deepcopy e usar o new recursivamente
meter o set e map a recolher dados
testar os modelos com algumas funçoes e verificar a previsao

como e q na previsao digo q o input1 ou o input50 +e o tamanho da lista, os inputs vao estar todos misturados

treinar os metodos individualmente com apenas as suas features
depois para usar o modelo usar o parser para perceber quais as features que tenho que enviar para conseguir utilizar o modelo

como faço para prever a energia em loops, muitas vez pode nao ser possivel saber os valores do loop em analise estatica
calculo para esses casos? ou uso um fator por exemplo: list.add() * loop_depth1 em que loop_depth1 tem um fator qualquer para ser multiplicado?
usar sliders para os fors sempre que o valor do for nao for um valor martelado
somar as energias das funçoes


a parte do size generator nao cria uma dist flat, isto pq o arrayllist com tipo int tem max in 1000
e o linked list tipo long tem max 500 +/- assim

criar batch script continuar mambos de comparacao de a duas semanas ver notas
 scp -r acarreira@polaris:xpto . rsync 


#encriptar gpg --symmetric --cipher-algo AES256 aduja.txt
#desencriptar gpg --decrypt aduja.txt.gpg > aduja.txt